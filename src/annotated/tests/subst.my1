# Tests of type variable renaming.

def unit_gen() -> Unit:
  while 1 == 0:
    0

unit = unit_gen()

# A DIY value of any type.
def undefined<'A>(x: Unit) -> 'A:
  car<'A>(nil<'A>)


# Some simple tests to ensure type variables' names don't matter.
# First, if this function typechecks, type substitition is doing
# something right.
#
#   (define (forall ('a 'b) ('a -> 'b)) test-naming
#     (type-lambda ('c 'd)
#       (lambda ((_ : 'c))
#         ((@ undefined 'd) unit))))
#
# This doesn't make sense in myth because type-lambdas are automatically
# applied in polymorphic functions.
def test_naming<'A, 'B>(x: 'A) -> 'B:
  undefined<'B>(unit)

# Also check that its type can be unified directly with another
# syntactic type.

check_type test_naming, <'E, 'F>('E -> 'F)

# Now, check that type param captures are avoided.
def test_capture<'A>(x: 'A) -> <'A>('A):
  forall<'B> -> undefined<'B>(unit)

check_type test_capture, <'C>('C -> <'D>('D))
check_type test_capture, <'C>('C -> <'C>('C))

