;
; A smoke test: define a "map" function.
;

(val x 10)

(val int-cons (@ cons int))
(val int-null (@ nil int))

(val test-list
  (int-cons 1 (int-cons 2 (int-cons 3 int-null))))

(val test-list-result
  (int-cons 2 (int-cons 3 (int-cons 4 int-null))))

(define int incr ([x : int]) (+ x 1))

(val-rec
  (forall ('a 'b) (('a -> 'b) (list 'a) -> (list 'b)))
  map
  (type-lambda
    ('a 'b)
    (lambda
      ((f : ('a -> 'b)) (l : (list 'a)))
      (if ((@ null? 'a) l)
        (@ nil 'b)
        ((@ cons 'b)
           (f ((@ car 'a) l))
           ((@ map 'a 'b) f ((@ cdr 'a) l)))))))

(val int-map (@ map int int))

(check-expect test-list-result (int-map incr test-list))
